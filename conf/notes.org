* Day one
** Keynote - Whither Web Programming?

   Gilad Bracha - coauthor Java 8 language spec

*** Strengths

    * Always available
      * ??
      * Offline can be flakey slow
      * Storage isn't always available
    * Hard to implement new languages
    * Issues (JS)
      * Integers not available
      * Concurrency
      * Privacy
      * Stack access
    * Dart
      * Try Dart online
        * Has to compile the program
      * But can make it faster by using incremental compilation [[http://gilad.try-dart-lang.appspot.com/][here]]
    * The Dart book
      * Isn't ready yet, because the reflection API isn't yet out.
      * The reflection API isn't read because the dart2js output is too
        large.
      * It's hard to know what you're going to call if you allow
        reflection.
      * In other languages you don't have to worry about keeping
        programs under 200kb.
    * Other
      * [[http://elm-lang.org/][Elm]]
        * A functional language for web UIs
        * Runs on the web with live environment
      * Leisure
        * presentation manager with built in functional lazy language

** Scaling Foursquare - From checkins to recommendations

   Jon Hoffman

   Foursquare have moved from just check-ins and have turned into a
   recommendation engine. There are 160 employees, 90 of which are
   engineers.

*** Data storage

    * Started with MySQL in 2009, but pretty quickly moved to Postgres.
    * Memcache in front of SQL engine.
    * By the time they had 1e6 users they had to split the DB
      * Joins in app code
      * Not enough RAM for indexes
    * Sharding
    * Consider Mongo, Cassandra, HBase
    * Mongo
      * They hoped that features would be developed just in time.
      * Gamble, but it worked.
      * 2010-2011 migration from Postgres to Mongo.
        * Custom code
      * Now 15 mongo clusters, 600 nodes
      * 1e6 million queries per second
    * Memcache
    * Elastic search
    * Readonly KV store
      * HFile service
      * Hadoop -> HFile -> App servers
      * Use Zookeeper for datatype to machine mapping
    * Zookeeper is the 'indispensable glue that holds everything
      together at Foursquare
    * Cachine service
      * Tail Mono oplog, put interesting events into Kafka, then info
        Redis cache.

*** Application complexity

    * Scala, Lift
    * Monolithic code base
      * Deploy everything all the time
      * Compile everything all the time
    * Move to SOA
      * Split into offline, API, Website
      * Looked at Finagle from Twitter
    * Trace requests by sending correlatoin ID from caller to callee.
    * Exception aggregation
    * ZooKeeper for host names
    * Circuit breaker
      * Loosely based on Hystrix from Netflix

** Facebook React

   * Fron Instagram
   * Build a virtual immutable DOM.
   * Throw away and rerender whenever things change.
   * Embded XML in the JS, there's a precompilation phase.
   * Reconcile
     * Figure out how to change the virtual DOM to match the immutable
       structure
     * Guarantee that the virtual DOM and the browser DOM will always
       match. Therefore, if youc create an input field with nothing in
       it, you won't be able to type in it.

** Devops practices to create flow - Jez Humble

   * [[http://www.slideshare.net/jezhumble/devops-culture-and-practices-to-create-flow][Slideshare]]

   * Where's the production line?
     * Commit which is the start on the production line
   * Kanban
   * Toyota made looms
     * Actually called Toyoda
     * The breakthrough loom automatically stopped when there was a problem
       * There was no way to make a defective product
   * Automation + People = autonomation
   * [[http://www.thisamericanlife.org/radio-archives/episode/403/nummi][This American Life NUMMI]]
     * GM plant with workforce that were demotivated
     * GM, Toyota joint venture
     * GM were going to fire everyone
     * Toyota rehired the 'worst workforce' and made them how to make
       high quality products
       * Cars never come off of the line in a broken state
       * Workers have the ability to stop the line and figure out what's wrong.
       * By giving workers control they were able to make the factory
         the best of GM
     * [[http://www.jamesshore.com/Blog/Continuous-Integration-on-a-Dollar-a-Day.html][James Shaw: CI on a dollar a day]]
       * Test, build locally
       * Take lock object
       * Check in
       * Build on other machine
         * If it fails, take the code out
   * Does CI scale?
     * Yes, better than feature branches. Work from master.
   * Validate before production
     * People might be needed
   * HP Laserjet
     * 5% time spent innovating, so need to change
     * Decided to rewrite
       * Consider [[http://martinfowler.com/bliki/StranglerApplication.html][strangler pattern]] instead of rewriting
     * All printers used to have different binaries. Change so that
       there is one binary.
     * Director of engineering - fix by walking and talking. "Why is the
       build breaking?"
     * Build pipeline
       * Levels of builds: 1, 2, 3, 4
       * 1 is basic tests
       * 2 is simulator
       * 3 firmware on logic boards
       * 30k hours of tests that run on a grid over night
       * Move the tests between levels. If a test at level one passes a
         lot, move it down. If a test at L4 fails a lot, move it up.
     * Get to the point where you get things done when you say that it's
       going to be done.
     * [[http://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726][A Practical Approach to Large-Scale Agile Development]]
     * [[http://www.amazon.com/The-Corporate-Culture-Survival-Guide/dp/0470293713][A Corporate Culture Survival Guide]]
     * [[http://puppetlabs.com/sites/default/files/2014-state-of-devops-report.pdf][2014 State of Devops Report]]
     * High trust
       * Measure culture
         * Ron Westrum
     * What Toyota is doing at any one time isn't a best practice and
       you can't copy and paste it from one org to another. Toyota
       solves their current problems.
     * Let workers try things out - tell them where you want to get to,
       not how to get there. "What are we trying to achieve, where are
       we now, what's the next step?"
     * [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1765804/pdf/v013p0ii22.pdf][A typology of organisational cultures]]

** Big Data in Capital Markets

   * What is big data? In this presentation it's an umbrella term, for
     techniques, tools etc.
   * The Vs: Volume, Variety, Veracity, Velocity
   * Look at the fundamentals, not just copy 'internet firms'
   * Patterns
     * Hadoop as ETL
       * 70% of Hadoop deployments in finance are for ETL
     * Hadoop as BI
       * Hive, PIG
       * Impala
     * Multiasset datastore
     * Big data governance
   * Anti-patterns
     * Fine grained jobs - interdependency pain
   * Data
     * You can get an EC2 instance with 250GB of memory, so you only
       need four machines to handle 1TB. This isn't a massive change
       from what you're used to. If you want to keep things in memory
       and you have > 1PB you have to think harder.
     * All of flickr is 2PB.
     * Semi structured data
       * How much structure do you need?
       * Even if you have structured data, what happens if you have more
         than one set of data, each with a different structure?
       * NoSQL makes sense for rapid analysis
       * 99% of processing on unstructured data is to derive structure
         from it.
       * Moving data around is slow
     * Latency v througput
       * 1s to do something on one machine, 1s to do 10 things on 10
         machines *but* it still takes a second. You've increased
         throughput but the latency is the same.

*** Case studies

**** Hadoop archive

     Replace tape archive with HDFS. Tapes fail.

**** Client review

     Pull in information from one 'big data' repository for clients when
     they're 'on boarded'.
